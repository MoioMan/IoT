[{"id":"6813f31f.f29bfc","type":"tab","label":"Flow 1","disabled":false,"info":""},{"id":"a1098b1d.5aff3","type":"mqtt out","z":"6813f31f.f29bfc","name":"mqtt","topic":"","qos":"0","retain":"","broker":"ae24aa7d.845048","x":770,"y":500,"wires":[]},{"id":"b177f8d9.19226","type":"delay","z":"6813f31f.f29bfc","name":"Thingspeak rate delimiter","pauseType":"rate","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"30","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":830,"y":440,"wires":[["a1098b1d.5aff3"]]},{"id":"9e973b1b.7788e","type":"debug","z":"6813f31f.f29bfc","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","x":370,"y":140,"wires":[]},{"id":"8ccc6614.c14","type":"function","z":"6813f31f.f29bfc","name":"Build mqtt message","func":"// Extract info from the payload\n// and map them to mqtt parameters\n\nvar API_KEY = \"0BQQWH2RLYHH2RAM\";\nvar CHANNEL_ID = \"1358293\"; \n\nmsg.topic = 'channels/' + CHANNEL_ID + '/publish/' + API_KEY;\n\nmsg.payload= msg.payload.fieldTarget + '=' + msg.payload.value + '&status=MQTTPUBLISH';\n\nreturn msg;","outputs":1,"noerr":0,"x":820,"y":380,"wires":[["b177f8d9.19226"]]},{"id":"51c191cb.141348","type":"inject","z":"6813f31f.f29bfc","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":120,"y":140,"wires":[["c9bc285a.c2226"]]},{"id":"c9bc285a.c2226","type":"file in","z":"6813f31f.f29bfc","name":"Load lines from file","filename":"/home/user/traffic.csv","format":"lines","chunk":false,"sendError":false,"x":150,"y":240,"wires":[["5bf286e9.a0e0e8"]]},{"id":"1ed361ed.2faf56","type":"split","z":"6813f31f.f29bfc","name":"","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","x":590,"y":380,"wires":[["8ccc6614.c14","5a8bd505.8b18fc"]]},{"id":"5bf286e9.a0e0e8","type":"function","z":"6813f31f.f29bfc","name":"Extract fields","func":"// HEX sequence ending with $ or ,\nconst payloadListRegex = /([a-fA-F0-9]+,)*([a-fA-F0-9]+)$/gm\nvar values = []\nvar i = 0;\nlet payload = {}\n\n// Retrieve the payloads in the line\nvar payloadList = payloadListRegex.exec(msg.payload)\nif (payloadList)\n{\n    values = String(payloadList[0]).split(\",\")\n    .map(m => Buffer.from(m, 'hex').toString())\n    .filter(m => m !== \"\" && m !== null)\n    .map(b => JSON.parse(b.toString()).value)\n}\n\npayload.values = values\n\n// Extract Message ID\nconst idRegex = /^[0-9]+/gm\nlet match = idRegex.exec(msg.payload)\nif (match)\n    payload.msgId = parseInt(String(match[0]))\n\n// Extract Topics\nconst topicListRegex = /Publish Message (\\(id=[0-9]+\\) )?\\[(\\w+\\/)*(\\w+)\\]/gm\nconst topicItemRegex = /\\[(\\w+\\/)*(\\w+)\\]/\nconst idItemRegex = /(id=[0-9]+)/\n\nlet publishes = []\ni = 0;\n\n// Find publish message of desired topics\nwhile((match = topicListRegex.exec(msg.payload)) !== null)\n{\n    let m = String(match[0])\n    publishes[i] = String(topicItemRegex.exec(m)[0])\n        .replace(\"[\", \"\").replace(\"]\", \"\");\n        \n    i++;\n}\n\n// Publish messages may be repeated!\n// Check distinct by same id & topic\nlet pub_out = publishes.filter((value, index, self) => self.indexOf(value) === index)\n\n// Return the distinct topic list\nif (pub_out.length > 0 && values.length > 0)\n{\n    payload.topics = pub_out\n    msg.payload = payload\n    return msg\n}","outputs":1,"noerr":0,"x":370,"y":240,"wires":[["9e973b1b.7788e","378dadb2.5dc0ca"]]},{"id":"378dadb2.5dc0ca","type":"function","z":"6813f31f.f29bfc","name":"Filter by topic","func":"const topicRegex = /factory\\/((department1\\/section1)|(department3\\/section3))\\/(plc|hydraulic_valve)/\n\nlet indexesToRemove = []\nlet i_remove = 0;\nfor (var i = 0; i < msg.payload.topics.length; i++)\n{\n    let topic = msg.payload.topics[i]\n    if (!topicRegex.test(topic))\n    {\n        indexesToRemove[i_remove] = i\n        i_remove++;\n    }\n}\n\nmsg.payload.topics = msg.payload.topics\n    .filter((t, i) => !indexesToRemove.includes(i))\nmsg.payload.values = msg.payload.values\n    .filter((t, i) => !indexesToRemove.includes(i))\n\nif (msg.payload.topics.length > 0 && msg.payload.values.length > 0)    \n    return msg;","outputs":1,"noerr":0,"x":640,"y":240,"wires":[["72b5746c.9157c4","490b9179.84bd2"]]},{"id":"72b5746c.9157c4","type":"debug","z":"6813f31f.f29bfc","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","x":850,"y":140,"wires":[]},{"id":"490b9179.84bd2","type":"function","z":"6813f31f.f29bfc","name":"Map to message","func":"let targetTopic;\nlet messages = []\nfor (let i_val = 0; i_val < msg.payload.values.length; i_val++)\n{\n    if (i_val < msg.payload.topics.length)\n        targetTopic = msg.payload.topics[i_val]\n        \n    let fieldTarget = \"field1\"\n    if (targetTopic.includes(\"hydraulic_valve\"))\n        fieldTarget = \"field2\"\n        \n    let newMsg = {}\n    newMsg.fieldTarget = fieldTarget\n    newMsg.value = msg.payload.values[i_val]\n    newMsg.msgId = msg.payload.msgId\n    \n    messages[i_val] = newMsg\n}\n    \nif (messages.length > 0)\n{\n    msg.payload = messages\n    return msg;\n}","outputs":1,"noerr":0,"x":950,"y":240,"wires":[["1ed361ed.2faf56"]]},{"id":"5a8bd505.8b18fc","type":"debug","z":"6813f31f.f29bfc","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","x":490,"y":440,"wires":[]},{"id":"ae24aa7d.845048","type":"mqtt-broker","z":"","name":"ThingSpeak","broker":"mqtt.thingspeak.com","port":"1883","tls":"","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""}]